// Automatically generated by pegomock. DO NOT EDIT!
// Source: io (interfaces: Closer)

package multicloser_test

import (
	"reflect"

	pegomock "github.com/petergtz/pegomock"
)

type MockCloser struct {
	fail func(message string, callerSkip ...int)
}

func NewMockCloser() *MockCloser {
	return &MockCloser{fail: pegomock.GlobalFailHandler}
}

func (mock *MockCloser) Close() error {
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Close", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockCloser) VerifyWasCalledOnce() *VerifierCloser {
	return &VerifierCloser{mock, pegomock.Times(1), nil}
}

func (mock *MockCloser) VerifyWasCalled(invocationCountMatcher pegomock.Matcher) *VerifierCloser {
	return &VerifierCloser{mock, invocationCountMatcher, nil}
}

func (mock *MockCloser) VerifyWasCalledInOrder(invocationCountMatcher pegomock.Matcher, inOrderContext *pegomock.InOrderContext) *VerifierCloser {
	return &VerifierCloser{mock, invocationCountMatcher, inOrderContext}
}

type VerifierCloser struct {
	mock                   *MockCloser
	invocationCountMatcher pegomock.Matcher
	inOrderContext         *pegomock.InOrderContext
}

func (verifier *VerifierCloser) Close() *Closer_Close_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Close", params)
	return &Closer_Close_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Closer_Close_OngoingVerification struct {
	mock              *MockCloser
	methodInvocations []pegomock.MethodInvocation
}

func (c *Closer_Close_OngoingVerification) GetCapturedArguments() {
}

func (c *Closer_Close_OngoingVerification) GetAllCapturedArguments() {
}
